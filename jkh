<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>لوحة التحكم - التسجيلات</title>
    
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Google Fonts - Tajawal -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Tajawal:wght@400;500;700;800;900&display=swap" rel="stylesheet">
    
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <style>
        body {
            font-family: 'Tajawal', sans-serif;
            background-color: #f3f4f6;
        }
        .registration-card {
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }
        .registration-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        .loading-spinner {
            border-top-color: #f3f4f6;
            border-left-color: #f3f4f6;
            border-bottom-color: #f3f4f6;
            border-right-color: #ef4444;
            animation: spinner 1s linear infinite;
        }
        @keyframes spinner {
            to { transform: rotate(360deg); }
        }

        #user-id-display {
            word-break: break-all;
            direction: ltr;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <!-- Header -->
    <header class="bg-white shadow-lg py-4">
        <div class="container mx-auto px-6 text-center">
            <h1 class="text-3xl md:text-4xl font-extrabold text-red-600">لوحة التحكم</h1>
            <p class="text-lg text-gray-600 mt-2">إدارة طلبات تسجيل اللاعبين</p>
        </div>
    </header>

    <!-- Main Content -->
    <main class="container mx-auto px-6 py-12">
        <div class="flex flex-col items-center justify-center mb-8">
             <!-- User ID Display -->
            <div class="bg-gray-200 text-gray-700 p-4 rounded-lg shadow-inner w-full md:w-3/4 lg:w-1/2 text-center mb-4">
                <p class="font-bold mb-2">معرّف المستخدم (للمشاركة):</p>
                <p id="user-id-display" class="font-mono text-sm break-all"></p>
            </div>
            
            <button id="refresh-button" class="bg-blue-600 text-white font-bold py-2 px-6 rounded-full hover:bg-blue-700 transition duration-300">
                <i class="fas fa-sync-alt mr-2"></i> تحديث القائمة
            </button>
        </div>

        <!-- Loading Indicator -->
        <div id="loading-spinner" class="text-center py-10">
            <div class="w-16 h-16 rounded-full border-4 loading-spinner mx-auto"></div>
            <p class="mt-4 text-gray-600 font-semibold">جاري تحميل البيانات...</p>
        </div>

        <!-- No Data Message -->
        <div id="no-data-message" class="text-center py-10 hidden">
            <p class="text-xl text-gray-500 font-semibold">لا توجد طلبات تسجيل حتى الآن.</p>
        </div>

        <!-- Registrations List -->
        <div id="registrations-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <!-- Registration cards will be dynamically added here -->
        </div>
    </main>

    <!-- Modal for confirmation -->
    <div id="modal" class="modal fixed inset-0 flex items-center justify-center p-4 bg-gray-900 bg-opacity-50 hidden">
        <div class="bg-white rounded-lg p-8 shadow-2xl text-center max-w-sm w-full mx-auto">
            <p id="modal-message" class="text-lg text-gray-700 mb-6"></p>
            <div id="modal-buttons" class="flex justify-center space-x-4 space-x-reverse">
                <button id="confirm-button" class="bg-red-600 text-white font-bold py-2 px-6 rounded-full hover:bg-red-700 transition duration-300">تأكيد</button>
                <button id="cancel-button" class="bg-gray-400 text-gray-800 font-bold py-2 px-6 rounded-full hover:bg-gray-500 transition duration-300">إلغاء</button>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer class="bg-gray-800 text-white py-4 mt-12">
        <div class="container mx-auto px-6 text-center">
            <p>&copy; 2025 لوحة التحكم. جميع الحقوق محفوظة.</p>
        </div>
    </footer>

    <script type="module">
        // Firebase imports
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInWithCustomToken, signInAnonymously, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, onSnapshot, query, where, orderBy, deleteDoc, doc, getDocs } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        let db;
        let auth;
        let userId = '';
        let appId = 'default-app-id';

        // Initialize Firebase
        const initializeFirebase = async () => {
            try {
                const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
                const app = initializeApp(firebaseConfig);
                auth = getAuth(app);
                db = getFirestore(app);
                appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

                // Sign in with custom token or anonymously
                const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
                if (initialAuthToken) {
                    await signInWithCustomToken(auth, initialAuthToken);
                } else {
                    await signInAnonymously(auth);
                }
            } catch (error) {
                console.error("Error initializing Firebase:", error);
            }
        };

        // Auth state listener
        onAuthStateChanged(auth, (user) => {
            if (user) {
                userId = user.uid;
                document.getElementById('user-id-display').textContent = userId;
                setupRealtimeRegistrationsListener();
            } else {
                console.log("User is signed out or anonymous.");
            }
        });

        // Function to set up the real-time listener
        const setupRealtimeRegistrationsListener = () => {
            const loadingSpinner = document.getElementById('loading-spinner');
            const noDataMessage = document.getElementById('no-data-message');
            const registrationsList = document.getElementById('registrations-list');

            loadingSpinner.classList.remove('hidden');
            noDataMessage.classList.add('hidden');
            registrationsList.innerHTML = '';
            
            const registrationsRef = collection(db, `artifacts/${appId}/users/${userId}/registrations`);
            
            onSnapshot(registrationsRef, (snapshot) => {
                loadingSpinner.classList.add('hidden');
                
                if (snapshot.empty) {
                    noDataMessage.classList.remove('hidden');
                    registrationsList.innerHTML = '';
                    return;
                }
                
                noDataMessage.classList.add('hidden');
                registrationsList.innerHTML = ''; // Clear the list before repopulating
                snapshot.forEach(doc => {
                    const data = doc.data();
                    const cardHtml = `
                        <div class="registration-card bg-white rounded-lg shadow-md p-6 relative">
                            <button class="delete-btn absolute top-3 left-3 text-red-500 hover:text-red-700 transition" data-id="${doc.id}">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                            <h3 class="text-xl font-bold text-gray-900 mb-2">${data.name}</h3>
                            <ul class="text-gray-700 space-y-2">
                                <li><strong class="font-semibold">تاريخ الميلاد:</strong> ${data.dob}</li>
                                <li><strong class="font-semibold">البريد الإلكتروني:</strong> ${data.email}</li>
                                <li><strong class="font-semibold">رقم الهاتف:</strong> ${data.phone}</li>
                                <li><strong class="font-semibold">المركز:</strong> ${data.position}</li>
                                <li><strong class="font-semibold">الفئة العمرية:</strong> ${data.ageCategory}</li>
                                ${data.message ? `<li><strong class="font-semibold">ملاحظات:</strong> ${data.message}</li>` : ''}
                                <li><strong class="font-semibold">وقت الإرسال:</strong> ${data.timestamp ? new Date(data.timestamp.seconds * 1000).toLocaleString('ar-EG', { dateStyle: 'long', timeStyle: 'short' }) : 'غير متوفر'}</li>
                            </ul>
                        </div>
                    `;
                    registrationsList.insertAdjacentHTML('beforeend', cardHtml);
                });
            });
        };
        
        // Modal for delete confirmation
        const modal = document.getElementById('modal');
        const modalMessage = document.getElementById('modal-message');
        const confirmButton = document.getElementById('confirm-button');
        const cancelButton = document.getElementById('cancel-button');
        let registrationToDeleteId = null;

        const showModal = (message, onConfirm) => {
            modalMessage.textContent = message;
            modal.classList.remove('hidden');
            confirmButton.onclick = () => {
                onConfirm();
                modal.classList.add('hidden');
            };
            cancelButton.onclick = () => {
                modal.classList.add('hidden');
            };
        };

        // Handle delete button clicks using event delegation
        document.getElementById('registrations-list').addEventListener('click', async (e) => {
            if (e.target.closest('.delete-btn')) {
                const button = e.target.closest('.delete-btn');
                registrationToDeleteId = button.dataset.id;
                showModal('هل أنت متأكد من حذف هذا الطلب؟', async () => {
                    if (registrationToDeleteId) {
                        try {
                            const docRef = doc(db, `artifacts/${appId}/users/${userId}/registrations`, registrationToDeleteId);
                            await deleteDoc(docRef);
                            console.log("Document successfully deleted!");
                        } catch (error) {
                            console.error("Error removing document: ", error);
                        } finally {
                            registrationToDeleteId = null;
                        }
                    }
                });
            }
        });

        // Handle refresh button click
        document.getElementById('refresh-button').addEventListener('click', () => {
            if (userId) {
                // The onSnapshot listener handles the refresh automatically,
                // but we can force a manual re-fetch if needed.
                // For this simple case, the existing listener is sufficient.
                // Re-running the listener setup function will re-attach it.
                setupRealtimeRegistrationsListener();
            }
        });

        // Initialize Firebase on window load
        window.onload = initializeFirebase;
    </script>
</body>
</html>
